defmodule TradebearAsh.Repo.Migrations.InitialMigration do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:properties, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :address, :text, null: false
      add :client_id, :uuid
    end

    create table(:notes, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :data, :text
      add :client_id, :uuid
      add :contact_id, :uuid
      add :property_id, :uuid
    end

    create table(:contacts, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :name, :text, null: false
      add :email, :text, null: false
      add :phone, :text, null: false
      add :address, :text, null: false
      add :client_id, :uuid
    end

    create table(:clients, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
    end

    alter table(:properties) do
      modify :client_id,
             references(:clients,
               column: :id,
               name: "properties_client_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:notes) do
      modify :client_id,
             references(:clients,
               column: :id,
               name: "notes_client_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :contact_id,
             references(:contacts,
               column: :id,
               name: "notes_contact_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :property_id,
             references(:properties,
               column: :id,
               name: "notes_property_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:contacts) do
      modify :client_id,
             references(:clients,
               column: :id,
               name: "contacts_client_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:clients) do
      add :name, :text, null: false
      add :billing_address, :text, null: false
    end
  end

  def down do
    alter table(:clients) do
      remove :billing_address
      remove :name
    end

    drop constraint(:contacts, "contacts_client_id_fkey")

    alter table(:contacts) do
      modify :client_id, :uuid
    end

    drop constraint(:notes, "notes_client_id_fkey")

    drop constraint(:notes, "notes_contact_id_fkey")

    drop constraint(:notes, "notes_property_id_fkey")

    alter table(:notes) do
      modify :property_id, :uuid
      modify :contact_id, :uuid
      modify :client_id, :uuid
    end

    drop constraint(:properties, "properties_client_id_fkey")

    alter table(:properties) do
      modify :client_id, :uuid
    end

    drop table(:clients)

    drop table(:contacts)

    drop table(:notes)

    drop table(:properties)
  end
end